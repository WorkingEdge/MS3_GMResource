Check results
=============

E501:2:80:line too long (84 > 79 characters)
E265:19:1:block comment should start with '# '
E302:20:1:expected 2 blank lines, found 1
E201:23:43:whitespace after '{'
E265:27:1:block comment should start with '# '
E122:34:9:continuation line missing indentation or outdented
E201:34:10:whitespace after '{'
E201:34:21:whitespace after '{'
E202:34:44:whitespace before '}'
E202:34:46:whitespace before '}'
E122:35:9:continuation line missing indentation or outdented
E201:35:10:whitespace after '{'
E201:35:21:whitespace after '{'
E202:35:42:whitespace before '}'
E501:35:80:line too long (86 > 79 characters)
E124:36:9:closing bracket does not match visual indentation
E501:37:80:line too long (83 > 79 characters)
W291:37:84:trailing whitespace
E225:39:21:missing whitespace around operator
E122:40:9:continuation line missing indentation or outdented
E201:40:10:whitespace after '{'
E201:40:21:whitespace after '{'
E202:40:44:whitespace before '}'
E202:40:46:whitespace before '}'
E122:41:9:continuation line missing indentation or outdented
E201:41:10:whitespace after '{'
E201:41:21:whitespace after '{'
E202:41:42:whitespace before '}'
E501:41:80:line too long (88 > 79 characters)
E251:52:58:unexpected spaces around keyword / parameter equals
E251:52:60:unexpected spaces around keyword / parameter equals
E501:52:80:line too long (124 > 79 characters)
E251:52:82:unexpected spaces around keyword / parameter equals
E251:52:84:unexpected spaces around keyword / parameter equals
E251:52:110:unexpected spaces around keyword / parameter equals
E251:52:112:unexpected spaces around keyword / parameter equals
W291:52:125:trailing whitespace
E128:53:9:continuation line under-indented for visual indent
E251:53:22:unexpected spaces around keyword / parameter equals
E251:53:24:unexpected spaces around keyword / parameter equals
E251:53:54:unexpected spaces around keyword / parameter equals
E251:53:56:unexpected spaces around keyword / parameter equals
E501:53:80:line too long (109 > 79 characters)
E251:53:89:unexpected spaces around keyword / parameter equals
E251:53:91:unexpected spaces around keyword / parameter equals
E202:53:108:whitespace before ')'
E303:58:1:too many blank lines (3)
E302:59:1:expected 2 blank lines, found 3
E265:62:5:block comment should start with '# '
W291:62:65:trailing whitespace
E122:66:9:continuation line missing indentation or outdented
W291:69:22:trailing whitespace
E122:72:21:continuation line missing indentation or outdented
E122:73:21:continuation line missing indentation or outdented
E122:74:21:continuation line missing indentation or outdented
E122:75:21:continuation line missing indentation or outdented
E122:76:17:continuation line missing indentation or outdented
E122:77:13:continuation line missing indentation or outdented
E122:78:9:continuation line missing indentation or outdented
E251:81:57:unexpected spaces around keyword / parameter equals
E251:81:59:unexpected spaces around keyword / parameter equals
E251:82:54:unexpected spaces around keyword / parameter equals
E251:82:56:unexpected spaces around keyword / parameter equals
W291:88:69:trailing whitespace
W293:89:1:blank line contains whitespace
E122:94:9:continuation line missing indentation or outdented
E501:95:80:line too long (93 > 79 characters)
E122:98:9:continuation line missing indentation or outdented
E202:98:50:whitespace before '}'
E265:100:9:block comment should start with '# '
E501:100:80:line too long (118 > 79 characters)
E265:109:9:block comment should start with '# '
W291:120:42:trailing whitespace
E501:125:80:line too long (87 > 79 characters)
E251:127:57:unexpected spaces around keyword / parameter equals
E251:127:59:unexpected spaces around keyword / parameter equals
E251:128:54:unexpected spaces around keyword / parameter equals
E251:128:56:unexpected spaces around keyword / parameter equals
W291:130:16:trailing whitespace
E302:131:1:expected 2 blank lines, found 1
E251:135:53:unexpected spaces around keyword / parameter equals
E251:135:55:unexpected spaces around keyword / parameter equals
E501:135:80:line too long (80 > 79 characters)
W291:150:78:trailing whitespace
E251:157:57:unexpected spaces around keyword / parameter equals
E251:157:59:unexpected spaces around keyword / parameter equals
E501:157:80:line too long (84 > 79 characters)
E251:162:29:unexpected spaces around keyword / parameter equals
E251:162:31:unexpected spaces around keyword / parameter equals
E501:170:80:line too long (82 > 79 characters)
E501:171:80:line too long (80 > 79 characters)
E251:173:49:unexpected spaces around keyword / parameter equals
E251:173:51:unexpected spaces around keyword / parameter equals
W291:173:77:trailing whitespace
E501:175:80:line too long (95 > 79 characters)
E501:178:80:line too long (91 > 79 characters)
E302:184:1:expected 2 blank lines, found 1
E202:191:28:whitespace before '}'
E231:193:20:missing whitespace after ':'
W291:197:38:trailing whitespace
E251:203:56:unexpected spaces around keyword / parameter equals
E251:203:58:unexpected spaces around keyword / parameter equals
E251:203:76:unexpected spaces around keyword / parameter equals
E251:203:78:unexpected spaces around keyword / parameter equals
E501:203:80:line too long (154 > 79 characters)
E251:203:101:unexpected spaces around keyword / parameter equals
E251:203:103:unexpected spaces around keyword / parameter equals
E251:203:135:unexpected spaces around keyword / parameter equals
E251:203:137:unexpected spaces around keyword / parameter equals
E211:211:20:whitespace before '('
E251:214:34:unexpected spaces around keyword / parameter equals
E251:214:36:unexpected spaces around keyword / parameter equals
E231:214:43:missing whitespace after ','
E265:217:9:block comment should start with '# '
E122:221:9:continuation line missing indentation or outdented
E501:222:80:line too long (93 > 79 characters)
E122:224:9:continuation line missing indentation or outdented
E202:224:40:whitespace before '}'
W293:225:1:blank line contains whitespace
E265:226:9:block comment should start with '# '
E501:226:80:line too long (118 > 79 characters)
E501:231:80:line too long (83 > 79 characters)
E265:233:9:block comment should start with '# '
W291:245:38:trailing whitespace
E122:261:9:continuation line missing indentation or outdented
E251:262:53:unexpected spaces around keyword / parameter equals
E251:262:55:unexpected spaces around keyword / parameter equals
E251:262:79:unexpected spaces around keyword / parameter equals
E501:262:80:line too long (95 > 79 characters)
E251:262:81:unexpected spaces around keyword / parameter equals
E265:265:1:block comment should start with '# '
E251:270:56:unexpected spaces around keyword / parameter equals
E251:270:58:unexpected spaces around keyword / parameter equals
E251:273:35:unexpected spaces around keyword / parameter equals
E251:273:37:unexpected spaces around keyword / parameter equals
E231:273:44:missing whitespace after ','
E265:276:9:block comment should start with '# '
E122:280:9:continuation line missing indentation or outdented
E265:281:9:block comment should start with '# '
W291:291:38:trailing whitespace
W291:302:17:trailing whitespace
E302:310:1:expected 2 blank lines, found 1
E251:310:49:unexpected spaces around keyword / parameter equals
E251:310:51:unexpected spaces around keyword / parameter equals
E231:310:58:missing whitespace after ','
E265:314:9:block comment should start with '# '
E122:318:9:continuation line missing indentation or outdented
E265:319:9:block comment should start with '# '
E501:334:80:line too long (90 > 79 characters)
E251:337:56:unexpected spaces around keyword / parameter equals
E251:337:58:unexpected spaces around keyword / parameter equals

Code
=============
import os
from flask import Flask, render_template, redirect, request, session, url_for, flash
from flask_pymongo import PyMongo
from bson.objectid import ObjectId
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
if os.path.exists("env.py"):
    import env

app = Flask(__name__)


app.config["MONGO_DBNAME"] = os.environ.get("MONGO_DBNAME")
app.config["MONGO_URI"] = os.environ.get("MONGO_URI")
app.secret_key = os.environ.get("SECRET_KEY")

mongo = PyMongo(app)

#Home page, default index
@app.route("/")
@app.route("/get_records")
def get_records():
    records = list(mongo.db.records.find({ }).sort([("_id", -1)]).limit(6))
    return render_template("records.html", records=records)


#Search
@app.route("/search_res", methods=["GET", "POST"])
def search_res():
    if request.method == "POST":
        search_term = request.form.get("search_term").lower()
        # Find matches in records collection using wildcard text search
        results = list(mongo.db.records.find(
        { "$text": { "$search": search_term } },
        { "score": { "$meta": 'textScore' }}).sort([('score', {'$meta': 'textScore'})]
        ))
        # Find matches in products collection, return result oredered by relevance, 
        # weighted on title/contains/notes. Index set up in MongoDB
        prod_results=list(mongo.db.products.find(
        { "$text": { "$search": search_term } },
        { "score": { "$meta": 'textScore' }}).sort([('score', {'$meta': 'textScore'})]))
        no_of_posts = len(results)
        if no_of_posts < 10:
            showing_posts = no_of_posts
        else:
            showing_posts = "ten"
        no_of_products = len(prod_results)
        if no_of_products < 6:
            showing_products = no_of_products
        else:
            showing_products = "five"
        return render_template("search_res.html", results = results, prod_results = prod_results, no_of_posts = no_of_posts, 
        showing_posts = showing_posts, no_of_products = no_of_products, showing_products = showing_products )
    return render_template("search_res.html")



# Show details for selected record
@app.route("/show_record/<record_id>", methods=["GET", "POST"])
def show_record(record_id):
    record = mongo.db.records.find_one({"_id": ObjectId(record_id)})
    #return render_template("show_record.html", record = record)    
    if request.method == "POST":
        comment_date = datetime.now()
        commenter_id = mongo.db.users.find_one(
        {"username": session["session_user"]})["_id"]
        mongo.db.records.update(
            {"_id": ObjectId(record_id)},
            {"$push": 
                {"comments":
                    {
                    "comment_by": session["session_user"],
                    "comment_text": request.form.get("comment_text"),
                    "comment_date": comment_date,
                    "commenter_id": commenter_id
                }
            }
        }
        )
        flash("Comment added. Thanks for your contribution.")
        return redirect(url_for("show_record", record_id = record_id))
    return render_template("show_record.html", record = record)


# Edit record
@app.route("/edit_record/<record_id>", methods=["GET", "POST"])
def edit_record(record_id):
    record = mongo.db.records.find_one({"_id": ObjectId(record_id)})    
    
    if request.method == "POST":
        updated_date = datetime.now()
        common_name = request.form.get("common_name").lower()
        user_id = mongo.db.users.find_one(
        {"username": session["session_user"]})["_id"]
        # Perform search to check if the entry exists in any product. Store this info as well

        contained_in = list(mongo.db.products.find(
        {"contains_common": {"$in": [common_name] }}))

        #Iterate over the returned list to get the product name (for embed) and product id (for reference by ObjectId)
        products = []
        for product in contained_in:
            product_name = product.get("prod_name")
            products.append(product_name)
        product_ids = []
        for product in contained_in:
            product_id = product.get("_id")
            product_ids.append(product_id)
        #Create the object that will be inserted in the db
        updated_record = {
            "title": request.form.get("record_title"),
            "common_name": common_name,
            "botanical_name": request.form.get("botanical_name"),
            "experience": request.form.get("experience"),
            "summer": request.form.get("summer"),
            "winter": request.form.get("winter"),
            "season": request.form.get("season"),
            "added_by": session["session_user"],
            "user_id": user_id,
            "updated_date": updated_date, 
            "image_link": request.form.get("image_url"),
            "contained_in": products,
            "contained_in_ids": product_ids
        }
        mongo.db.records.update({"_id": ObjectId(record_id)}, {"$set": updated_record})
        flash("Record updated. Thanks for your contribution.")
        return redirect(url_for("show_record", record_id = record_id))
    return render_template("edit_record.html", record = record)

# Delete record 
@app.route("/delete_record/<record_id>", methods=["POST"])
def delete_record(record_id):
    mongo.db.records.remove({"_id": ObjectId(record_id)})
    flash("The record has been deleted.")
    return redirect(url_for('show_profile', username = session['session_user']))


# Registration based on the task manager walkthrough project
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username_taken = mongo.db.users.find_one(
            {"username": request.form.get("username").lower()})
        if username_taken:
            flash("This username is not available. Please try another.")
            return render_template("register.html")
        register_user = {
            "username": request.form.get("username").lower(),
            "email": request.form.get("email"),
            "password": generate_password_hash(request.form.get("password")), 
            "user_is_admin": ""
        }
        mongo.db.users.insert_one(register_user)

        session["session_user"] = request.form.get("username").lower()
        flash("You've been registered. Welcome!")
        return redirect(url_for("show_profile", username = session["session_user"]))
    return render_template("register.html")


# Login based on the task manager walkthrough project
@app.route("/login", methods = ["GET", "POST"])
def login():
    if request.method == "POST":
        user_exists = mongo.db.users.find_one(
            {"username": request.form.get("username").lower()})
        if user_exists:
            if check_password_hash(
                    user_exists["password"], request.form.get("password")):
                    session["session_user"] = request.form.get("username").lower()
                    flash("Welcome back{}".format(request.form.get("username")))
                    return redirect(url_for(
                        "show_profile", username = session["session_user"]))   
            else:
                flash("The username or password you entered is not correct. Please try again.")
                return redirect(url_for("login"))
        else:
            flash("The username or password you entered is not correct. Please try again.")
            return redirect(url_for("login"))

    return render_template("login.html")

# Profile page based on task manager walkthrough
@app.route("/profile/<username>", methods=["GET", "POST"])
def show_profile(username):
    username = mongo.db.users.find_one(
        {"username": session["session_user"]})["username"]
    user_id = mongo.db.users.find_one(
        {"username": session["session_user"]})["_id"]
    records = list(mongo.db.records.find(
        {"user_id": user_id }))
    commented = list(mongo.db.records.find(
        {"comments":{"$elemMatch": {"commenter_id": user_id}}}))
    poster_status = None
    if len(records) > 5:
        poster_status = "gold"
    commenter_status = len(commented)    

    for post in commented:
        comment_details = []

    if session["session_user"]:
        return render_template("profile.html", username = username, records = records, poster_status = poster_status, commenter_status = commenter_status)
    return redirect(url_for("login"))


@app.route("/logout")
def logout():
    flash("Goodbye. You have been logged out.")
    session.pop("session_user")
    return redirect (url_for("login"))


@app.route("/add_record", methods = ["GET","POST"])
def add_record():
    if request.method == "POST":
        #Variables to hold data to store on db
        added_date = datetime.now()
        common_name = request.form.get("common_name").lower()
        user_id = mongo.db.users.find_one(
        {"username": session["session_user"]})["_id"]
        # Perform search to check if the entry exists in any product. Store this info as well
        contained_in = list(mongo.db.products.find(
        {"contains_common": common_name }))
        
        #Iterate over the returned list to get the product name (for embed) and product id (for reference by ObjectId)
        products = []
        for product in contained_in:
            product_name = product.get("prod_name")
            product_id = product.get("_id")
            prod_details = {"product_name": product_name, "product_id": product_id}
            products.append(prod_details)
        #Create the object that will be inserted in the db
        record = {
            "title": request.form.get("record_title"),
            "common_name": common_name,
            "botanical_name": request.form.get("botanical_name"),
            "season": request.form.getlist("season"),
            "n_fixing": request.form.get("n_fixing"),
            "pollinator_friendly": request.form.get("pollinator"),
            "experience": request.form.get("experience"),
            "season": request.form.getlist("season"),
            "added_by": session["session_user"],
            "user_id": user_id,
            "added_date": added_date, 
            "image_link": request.form.get("image_url"),
            "contained_in": products
        }
        mongo.db.records.insert_one(record)
        flash("Record added. Thanks for your contribution.")
        return redirect(url_for("get_records"))
    return render_template("add_record.html")


@app.route("/products")
def show_products():
    user_is_admin = None
    products = list(mongo.db.products.find())
    if session.get('session_user') is not None:
        user_is_admin = mongo.db.users.find_one(
        {"username": session["session_user"]})["user_is_admin"]
    return render_template("products.html", products = products, user_is_admin = user_is_admin)


#Show an individual record
@app.route("/show_product/<product_id>")
def show_product(product_id):
    product = mongo.db.products.find_one(
        {"_id": ObjectId(product_id)})
    return render_template("show_product.html", product = product)


@app.route("/add_product", methods = ["GET","POST"])
def add_product():
    if request.method == "POST":
        #Variables to hold data to store on db
        added_date = datetime.now()
        common_names = request.form.get("common_names").lower().split(", ")
        user_id = mongo.db.users.find_one(
        {"username": session["session_user"]})["_id"]
        #Create the object that will be inserted in the db
        product = {
            "prod_name": request.form.get("product_name"),
            "contains_common": common_names,
            "botanical_names": request.form.get("botanical_names"),
            "summer": request.form.get("summer"),
            "winter": request.form.get("winter"),
            "n_fixing": request.form.get("winter"),
            "added_by": session["session_user"],
            "user_id": user_id,
            "added_date": added_date, 
            "image_link": request.form.get("image_url"),
            "prod_notes": request.form.get("prod_notes"),
            "prod_price": request.form.get("prod_price")
        }
        mongo.db.products.insert_one(product)
        flash("Product added.")
        return redirect(url_for("show_products"))
    return render_template("add_product.html")


# Delete product 
@app.route("/delete_product/<product_id>", methods=["POST"])
def delete_product(product_id):
    mongo.db.products.remove({"_id": ObjectId(product_id)})
    flash("The product has been deleted.")
    return redirect(url_for('show_products'))

# Edit product
@app.route("/edit_product/<product_id>", methods = ["GET","POST"])
def edit_product(product_id):
    product = mongo.db.products.find_one({"_id": ObjectId(product_id)})
    if request.method == "POST":
        #Variables to hold data to store on db
        updated_date = datetime.now()
        common_names = request.form.get("common_names").lower().split(", ")
        user_id = mongo.db.users.find_one(
        {"username": session["session_user"]})["_id"]
        #Create the object that will be inserted in the db
        updated_product = {
            "prod_name": request.form.get("product_name"),
            "contains_common": common_names,
            "botanical_names": request.form.get("botanical_names"),
            "summer": request.form.get("summer"),
            "winter": request.form.get("winter"),
            "n_fixing": request.form.get("winter"),
            "added_by": session["session_user"],
            "user_id": user_id,
            "image_link": request.form.get("image_url"),
            "prod_notes": request.form.get("prod_notes"),
            "prod_price": request.form.get("prod_price"),
            "updated_date": updated_date
        }
        mongo.db.products.update({"_id": ObjectId(product_id)}, {"$set": updated_product})
        flash("Product updated.")
        return redirect(url_for("show_products"))
    return render_template("edit_product.html", product = product)


@app.route("/contact", methods=['GET', 'POST'])
def contact():
    return render_template("contact.html")


if __name__ == "__main__":
    app.run(host=os.environ.get("IP"),
            port=int(os.environ.get("PORT")),
            debug=True)
